# NOTES
# You will need 4 concurrent pipelines to allow this to run as fast as possible
# Please generate an API Key Codefresh CLI https://g.codefresh.io/account/tokens and store in API_KEY variable
# You need to configure Docker Registry access in Codefresh and set push build step for (3) micro-services to push to that registry by friendly name
# You need to configure Kubernetes with a Pull Secret for the Registry and update variable KUBE_PULL_SECRET with the name you gave the secret
# Pull Secrets explained: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
# You can use your integrated Codefresh Registry for above just follow steps documented here: https://codefresh.io/docs/docs/docker-registries/codefresh-registry/
# Update the _repository values below with that value ex. r.cfcr.io/CF_ACCOUNT/CF_REPOSITORY/PIPELINE_NAME or r.cfcr.io/perfect_pipeline/codefresh/example-voting-app-worker
# Please make sure to update each pipeline yaml file under result, vote and worker with your correct friendly Docker Registry name See comment inline on those files
# Pipeline IDs for the pipelines for 3 microservices (Shown in curl webhook command on pipeline page in Configuration > General Settings)
# Create KUBE_CONTEXT variables with Codefresh friendly name given to your Kubernetes Cluster
# Create KUBE_NAMESPACE variable with Kubernetes namespace for Release
# TODO Turn into README
version: '1.0'
steps:
  BuildMicroServices:
    title: Check Build Concurrency
    image: 'codefresh/cli:latest'
    commands: 
      - apk add bash
      - codefresh auth create-context --api-key ${{CODEFRESH_CLI_KEY}}
      - echo "Checking if images exist..."
      - codefresh get image --image-name example-voting-app-worker --tag ${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}} | grep "no available resources" && echo "rebuild" || { echo "Skipping builds"; exit 0; }
      - bash -c 'IFS=" " read -a pipelineidsarray <<< "${{PARALLEL_PIPELINES_IDS}}" && for id in "${pipelineidsarray[@]}"; do buildids="$buildids $(codefresh run $id -b=${{CF_BRANCH}} -d)"; done && codefresh wait $buildids'
  CreateDBSnapShots:
    title: Create volume snapshots
    image: codefresh/plugin-helm:2.8.0
    commands:
      - echo "Creating snapshots"
      - kubectl config use-context ${{KUBE_CONTEXT}}
      - kubectl apply -f ./portworx/snapshot-postgres.yaml
      - kubectl apply -f ./portworx/snapshot-redis.yaml
      - echo "Setting up snapshots as volumes for staging"
      - kubectl apply -f ./portworx/restore-postgres.yaml
      - kubectl apply -f ./portworx/restore-redis.yaml
      - echo "PVC Status:"
      - kubectl get pvc
  HelmUpgrade:
    title: Deploy Chart to Staging
    image: codefresh/plugin-helm:2.8.0 # You need to make sure you've set this to the correct version of Tiller installed on your helm init
    working_directory: ./
    environment:
      - CHART_NAME=./helm/
      - RELEASE_NAME=staging-voting-app
      - KUBE_CONTEXT=${{KUBE_CONTEXT}}
      - NAMESPACE=${{KUBE_NAMESPACE}}
      - DEBUG_CHART=true
      - WAIT=YES
      - custom_postgresql_persistence_existingClaim=staging-voting-app-postgresql
      - custom_postgresql_persistence_storageClass=px-ha-sc
      - custom_redis_persistence_existingClaim=staging-voting-app-redis
      - custom_redis_persistence_storageClass=px-ha-sc
      - custom_result_image_repository=r.cfcr.io/${{CODEFRESH_ACCOUNT}}/codefresh/example-voting-app-result
      - custom_result_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
      - custom_result_image_pullSecret=${{KUBE_PULL_SECRET}}
      - custom_vote_image_repository=r.cfcr.io/${{CODEFRESH_ACCOUNT}}/codefresh/example-voting-app-vote
      - custom_vote_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
      - custom_vote_image_pullSecret=${{KUBE_PULL_SECRET}}
      - custom_worker_image_repository=r.cfcr.io/${{CODEFRESH_ACCOUNT}}/codefresh/example-voting-app-worker
      - custom_worker_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
      - custom_worker_image_pullSecret=${{KUBE_PULL_SECRET}}
  GrabEndPoint:
    title: Waiting for endpoint to be ready
    image: codefresh/plugin-helm:2.8.0
    commands:
      - bash -c 'external_ip=""; while [ -z $external_ip ]; do echo "Waiting for end point..."; external_ip=$(kubectl get svc staging-voting-app-vote --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}"); [ -z "$external_ip" ] && sleep 10; done; echo "End point ready-" && echo $external_ip; cf_export IP=$external_ip'
  BuildingTestDockerImage:
    title: Building Test Docker Image
    type: build
    image_name: codefresh/example-voting-app-tests
    working_directory: ./
    dockerfile: Dockerfile
    tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
  FunctionalTests:
    title: Functional Tests
    type: composition
    composition:
      version: '2'
      services:
        selenium_hub:
          image: selenium/hub
          ports:
            - 4444
          environment:
            - SE_OPTS=-debug
            - GRID_MAX_SESSION=5
        chrome_node:
          image: selenium/node-chrome-debug
          ports:
            - 5900
            - 5555
          command: bash -c "sleep 5 && /opt/bin/entry_point.sh"
          depends_on: 
            - selenium_hub
          environment:
            - HUB_HOST=selenium_hub
            - REMOTE_HOST=http://chrome_node:5555
            - NODE_MAX_SESSION=5
            - NODE_MAX_INSTANCES=5
    composition_candidates:
      test:
        image: 'r.cfcr.io/${{CODEFRESH_ACCOUNT}}/codefresh/example-voting-app-tests:${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
        environment:
          IP: ${{IP}}
        command: python -m pytest -vvv ${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}/tests/selenium/test_app.py
        volumes:
          - '${{CF_VOLUME_NAME}}:/codefresh/volume'
    add_flow_volume_to_composition: true
  DeployProd:
    title: Deploy Chart to Production
    image: codefresh/plugin-helm:2.8.0 # You need to make sure you've set this to the correct version of Tiller installed on your helm init
    working_directory: ./
    environment:
      - CHART_NAME=./helm/
      - RELEASE_NAME=prod-voting-app
      - KUBE_CONTEXT=${{KUBE_CONTEXT}}
      - NAMESPACE=${{KUBE_NAMESPACE}}
      - DEBUG_CHART=true
      - custom_result_image_repository=r.cfcr.io/${{CODEFRESH_ACCOUNT}}/codefresh/example-voting-app-result
      - custom_result_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
      - custom_result_image_pullSecret=${{KUBE_PULL_SECRET}}
      - custom_vote_image_repository=r.cfcr.io/${{CODEFRESH_ACCOUNT}}/codefresh/example-voting-app-vote
      - custom_vote_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
      - custom_vote_image_pullSecret=${{KUBE_PULL_SECRET}}
      - custom_worker_image_repository=r.cfcr.io/${{CODEFRESH_ACCOUNT}}/codefresh/example-voting-app-worker
      - custom_worker_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
      - custom_worker_image_pullSecret=${{KUBE_PULL_SECRET}}
  RemoveStaging:
    title: Remove staging env
    image: codefresh/plugin-helm:2.8.0
    commands:
      - kubectl config use-context ${{KUBE_CONTEXT}}
      - helm delete --purge staging-voting-app